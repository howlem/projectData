#correlation
res<-cor(combinedYPAH[,c(2:4)],use='complete.obs')
round(res,2)
#correlation
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
#scatterplot
library(car)
scatterplotMatrix(combinedYPAH[,c(2:4)],
main="Simple Scatterplot Matrix")
#scatterplot of log
scatterplotMatrix(log(combinedYPAH[,c(2:4)]),
main="Simple Scatterplot Matrix")
#non-parametric
cor(combinedYPAH[,c(2:4)],use='complete.obs',method='spearman')
#GET DATA
corruptLink='https://raw.githubusercontent.com/EvansDataScience/data/master/corruption.csv'
econoLink='https://raw.githubusercontent.com/EvansDataScience/data/master/economic.csv'
enviroLink='https://raw.githubusercontent.com/EvansDataScience/data/master/environment.csv'
pressLink='https://raw.githubusercontent.com/EvansDataScience/data/master/pressfreedom.csv'
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
str(indexes)
summary(indexes)
library(psych)
install.packages("psych")
library(psych)
indexes$scorepressOK=reverse.order(-1,indexes$scorepress)
library(psych)
indexes$scorepressOK=code(-1,indexes$scorepress)
indexes$scorepressOK=reverse.code(-1,indexes$scorepress)
indexes$presscat=as.facotr(indexes$presscat)
indexes$presscat=as.factor(indexes$presscat)
indexes$environmentCat=as.factor(indexes$environmentCat)
#LINEAR REGRESSION
hist(indexes$environment)
explanans=names(indexes)[c(3,4,9)]
explanans=names(indexes)[c(3,4,9)]
for(x in explanans){
par=cbind(indexes[,x],indexes$environment)
p=cor.test(indexes[,x],indexes$environment)
print(paste("Pearson:",p$estimate,"- Is significant?", p$p.value<0.05))
}
cor(indexes[explanans])
row.names(indexes)=indexes$Country
LinRegEPI=lm(environment~corruptionIndex+scoreEconomy+scorepressOK,
data=indexes)
summary(LinRegEPI)
results=coef(summary(LinRegEPI))
data.frame(coefficient=results[,1],Significant=results[,4]<0.05)
summary(LinRegEPI)$adj.r.squared
library(car)
influencePlot(LinRegEPI,
id.method="noteworthy",
id.n = 3,
main="Identifying outliers",
sub="Circle size is proportional to Cook's Distance")
#GET DATA
corruptLink='https://raw.githubusercontent.com/EvansDataScience/data/master/corruption.csv'
econoLink='https://raw.githubusercontent.com/EvansDataScience/data/master/economic.csv'
enviroLink='https://raw.githubusercontent.com/EvansDataScience/data/master/environment.csv'
pressLink='https://raw.githubusercontent.com/EvansDataScience/data/master/pressfreedom.csv'
corrupt=read.csv(corruptLink,stringsAsFactors = F)
econo=read.csv(econoLink,stringsAsFactors = F)
enviro=read.csv(enviroLink,stringsAsFactors = F)
press=read.csv(pressLink,stringsAsFactors = F)
indexes1=merge(corrupt,econo)
indexes2=merge(press,enviro)
indexes=merge(indexes1,indexes2)
str(indexes)
summary(indexes)
#FORMAT DATA
library(psych)
indexes$scorepressOK=reverse.code(-1,indexes$scorepress)
indexes$presscat=as.factor(indexes$presscat)
indexes$environmentCat=as.factor(indexes$environmentCat)
#LINEAR REGRESSION
hist(indexes$environment)
explanans=names(indexes)[c(3,4,9)]
for(x in explanans){
par=cbind(indexes[,x],indexes$environment)
p=cor.test(indexes[,x],indexes$environment)
print(paste("Pearson:",p$estimate,"- Is significant?", p$p.value<0.05))
}
cor(indexes[explanans])
row.names(indexes)=indexes$Country
LinRegEPI=lm(environment~corruptionIndex+scoreEconomy+scorepressOK,
data=indexes)
summary(LinRegEPI)
results=coef(summary(LinRegEPI))
data.frame(coefficient=results[,1],Significant=results[,4]<0.05)
summary(LinRegEPI)$adj.r.squared
library(car)
influencePlot(LinRegEPI,
id.method="noteworthy",
id.n = 3,
main="Identifying outliers",
sub="Circle size is proportional to Cook's Distance")
library(MASS)
summary(LinRegEPI)$adj.r.squared
LinRegEPI_R=rlm(environment ~ corruptionIndex+scoreEconomy+scorepressOK,
data=indexes)
data.frame(coefficient=results[,1],Significant=abs(results[,3])>2)
indexes$presscat<-relevel(indexes$presscat,ref="High")
data.frame(Coefficient=results[,1],Significant=results[,4]<0.05)
indexes$presscat<-relevel(indexes$presscat,ref="High")
LinRegEPI_catX<-lm(environment ~ corruptionIndex+scoreEconomy+presscat,
data=indexes)
results=coef(summary(LinRegEPI_catX))
data.frame(Coefficient=results[,1],Significant=results[,4]<0.05)
summary(LinRegEPI_catX)$adj.r.squared
#get data
faostat=read.csv("https://github.com/howlem/projectData/raw/master/Production_Crops_E_All_Data.csv",stringsAsFactors = F)
#check is data frame
is.data.frame(faostat)
#install libraries
library(DescTools)
library(ggplot2)
library(moments)
library(stringr)
library(scales)
#review data called
head(faostat)
str(faostat)
names(faostat)
##YIELD##
#just keep yield data
yield_1=faostat[faostat$'Element'!='Production',]
yield=yield_1[yield_1$'Element'!='Area harvested',]
head(yield)
#aggregate by country
yield=aggregate(yield$'Y2016',by=list(yield$'Area'),sum)
names(yield)=c('country','TotYield2016')
yield
str(yield)
##PRODUCTION##
#just keep production data
prod_1=faostat[faostat$'Element'!='Yield',]
prod=prod_1[prod_1$'Element'!='Area harvested',]
head(prod)
#aggregate by country
prod=aggregate(prod$'Y2016',by=list(prod$'Area'),sum)
names(prod)=c('country','TotProd2016')
prod
##AREA HARVESTED##
#just keep area harvested data
area_harv_1=faostat[faostat$'Element'!='Yield',]
area_harv=area_harv_1[area_harv_1$'Element'!='Production',]
head(area_harv)
#aggregate by country
area_harv=aggregate(area_harv$'Y2016',by=list(area_harv$'Area'),sum)
names(area_harv)=c('country','TotAreaHarv2016')
area_harv
bp$stats
bp_log$stats
length(bp_log$out)
bp$stats
bp_log$stats
length(bp$out)
length(bp_log$out)
#check data types
str(yield)
#centrality
summary(yield$'TotYield2016')
#dispersion
sd(yield$'TotYield2016',na.rm=T)
##coefficient of variation
sd(yield$'TotYield2016',na.rm=T)/mean(yield$'TotYield2016',na.rm=T)
#skewness
skewness(yield$'TotYield2016',na.rm=T)
#kurtosis
kurtosis(yield$'TotYield2016',na.rm=T)
Kurt(yield$'TotYield2016',na.rm=T)
#histogram
##keep non missing
data=yield[is.finite(yield$'TotYield2016'),]
##making numeric
as.numeric(data$'TotYield2016')
##histogram
hist(data$'TotYield2016')
##histogram of log
hist(log(data$'TotYield2016'))
#saving mean and sd
mnVar=mean(var,na.rm=T)
sdVar=sd(var,na.rm=T)
#outliers
summary(yield$'TotYield2016')
##boxplot
(bp=boxplot(yield$'TotYield2016',horizontal=T))
##boxplot of log
(bp_log=boxplot(log(yield$'TotYield2016')))
#show values of both boxplots
bp$stats
bp_log$stats
#show number of outliers
length(bp$out)
length(bp_log$out)
#merge yield, production, and area harvested data into one dataset
combinedYP=merge(yield,prod)
combinedYPAH=merge(combined,area_harv)
head(combinedYPAH)
#correlation
res<-cor(combinedYPAH[,c(2:4)],use='complete.obs')
round(res,2)
#correlation of log
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
#scatterplot
library(car)
scatterplotMatrix(combinedYPAH[,c(2:4)],
main="Simple Scatterplot Matrix")
#scatterplot of log
scatterplotMatrix(log(combinedYPAH[,c(2:4)]),
main="Simple Scatterplot Matrix")
#non-parametric
cor(combinedYPAH[,c(2:4)],use='complete.obs',method='spearman')
##making numeric
as.numeric(data$'TotYield2016')
str(data)
##GET DATA
#install packages
token='&$$app_token=nHXVRMEAfVOGiycOwWDyAP7Ys'
#endpoint
endpoint="https://data.wa.gov/resource/74eq-kst5.json?"
#subsetting at API
filters='&jurisdiction_type=Statewide'
sqlQueries='&$where=election_year >= 2012'
limit = '$limit=4000000'
#building url
urlLink=paste0(endpoint,limit,filters,token)
library(jsonlite)
contributions=fromJSON(urlLink)
is.data.frame(contributions)
names(contributions)
contributions=contribtions[,c('contributor_state','contributor_zip','amount','election_year','party')]
contributions=contributions[,c('contributor_state','contributor_zip','amount','election_year','party')]
str(contributions)
contributions$amount=as.numeric(contributions$amount)
table(contributions$contributor_state)
WASzip=contributions[contributions$contributor_state%in%'WA',]
row.names(WASzip)=NULL
'985'>'9800'
WASzip$contributor_zip[1]
WASzip$contributor_zip=as.numeric(WASzip$contributor_zip)
WASzip=WASzip[(WASzip$contributor_zip <= 99403) & (WASzip$contributor_zip >= 98001),]
WASzip=WASzip[complete.cases(WASzip),]
row.names(WASzip)=NULL
numericColumns=c("amount")
aggregateBY='contributor_zip'
WA_zip_contri=aggregate(WASzip[,numericColumns], by=list(WASzip[,aggregateBY]),sum)
names(WA_zip_contri)=c('contributor_zip','amount')
head(WA_zip_contri)
##GET MAP
compressedMap="https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
library(rgdal)
install.packages("rgdal")
library(rgdal)
waszipMap <- rgdal::readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
names(wazipMap)
library(rgdal)
waszipMap <- rgdal::readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
names(wazipMap)
library(rgdal)
wazipMap <- rgdal::readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
names(wazipMap)
str(wazipMap$ZCTA5CE10)
str(WA_zip_contri$contributor_zip)
str(wazipMap$ZCTA5CE10)
wazipMap$ZCTA5CE10=as.numeric(wazipMap$ZCTA5CE10)
contribWAmap=merge(wazipMap,WA_zip_contri,by.x='ZCTA5CE10',by.y='contributor_zip',all.x=F)
nrow(contribWAmap)
nrow(wazipMap)
plot(wazipMap,col='black')
plot(contribWAmap,col='pink',border='grey',add=T)
contribWAmap$contribDen=contribWAmap$amount/contribWAmap$POP2017
summary(contribWAmap$contribDen)
contribWAmap@data[contribWAmap$contribDen==Inf,]['contribDen']
contribWAmap=contribWAmap[contribWAmap$contribDen!=Inf,]
summary(contribWAmap$contribDen)
library(RColorBrewer)
library(RColorBrewer)
library(classInt)
install.packages("classInt")
library(RColorBrewer)
library(classInt)
varToPlot=contribWAmap$contribDen
colorForScale='YlGnBu'
numberOfClasses=5
colorForScale='YlGnBu'
colors=brewer.pal(numberOfClasses,colorForScale)
intervals <- classIntervals(varToPlot,numberOfClasses,
style="quantile",
dataPrecision = 2)
colorRampPalette <- findColours(intervals,colors)
numberOfClasses=5
colorForScale='YlGnBu'
colors=brewer.pal(numberOfClasses,colorForScale)
intervals <- classIntervals(varToPlot,numberOfClasses,
style="quantile",
dataPrecision = 2)
colorpPalette <- findColours(intervals,colors)
legendText="contribution rate"
shrinkLegend=0.4
title="contribtution towards candidates in WA since 2012"
plot(wazipMap,col='red',main=title)
plot(contribWAmap,col=colorPalette,border='grey',add=T)
legendText="contribution rate"
shrinkLegend=0.4
title="contribtution towards candidates in WA since 2012"
plot(wazipMap,col='red',main=title)
plot(contribWAmap,col=colorpPalette,border="grey",add=T)
legend('topright',legend=names(attr(colorpPalette,"table")),
fill=attr(colorpPalette,"palette"),cex=shrinkLegend,
bty="n",
title=legendText)
https://github.com/UNFAOstatistics/gisfao/raw/master/R/gisfao.R
devtools::install_github('UNFAOstatistics/gisfao')
install.packages("devtools")
devtools::install_github('UNFAOstatistics/gisfao')
library(gisfao)
library(sp)
data(fao_world)
plot(fao_world)
compressedMap=fao_world
compressedMap
head(fao_world)
devtools::install_github('UNFAOstatistics/gisfao')
library(gisfao)
library(sp)
data(fao_world)
plot(fao_world)
names(fao_world)
names(wazipMap)
(maps=list.files(pattern = 'shp'))
(maps=list.files(pattern = 'shp'))
names(fao_world)
str(fao_world$FAOST_CODE)
names(fao_world)
load("C:/Users/Mel Howlett/Downloads/fao_world.RData")
compressedMap="https://github.com/UNFAOstatistics/gisfao/raw/master/data/fao_world.RData"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
compressedMap="https://github.com/UNFAOstatistics/gisfao/raw/master/data/fao_world.RData"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
load("https://github.com/UNFAOstatistics/gisfao/raw/master/data/fao_world.RData")
load(url("https://github.com/UNFAOstatistics/gisfao/raw/master/data/fao_world.RData"))
head(fao_world)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/blob/master/worldMap.zip?raw=true"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/blob/master/worldMap.zip?raw=true"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/projectData/raw/master/worldMap%20(1).zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp')
library(rgdal)
(maps=list.files(pattern='shp')
library(rgdal)
(maps=list.files(pattern='shp'))
library(rgdal)
(maps=list.files(pattern='shp'))
library(rgdal)
worldmap <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp'))
library(rgdal)
worldmap <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp'))
library(rgdal)
world_map <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp'))
library(rgdal)
world_map <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
(maps=list.files(pattern='shp'))
library(rgdal)
my_map <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
(maps=list.files(pattern='shp'))
library(rgdal)
my_map <- rgdal::readOGR("worldMap.shp",stringsAsFactors = F)
(maps=list.files(pattern='shp'))
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp'))
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern='shp'))
(maps=list.files(pattern='shp'))
(maps=list.files(pattern='.shp'))
(maps=list.files(pattern = 'shp'))
##MAP DATA
compressedMap="https://github.com/howlem/PROJECT/raw/master/worldMap.zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
##MAP DATA
compressedMap="https://github.com/howlem/projectData/raw/master/worldMap%20(1).zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
##MAP DATA
compressedMap="https://github.com/howlem/projectData/raw/master/worldMap%20(1).zip"
library(utils)
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
{r, eval=FALSE}
library(rgdal)
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
(maps=list.files(pattern = 'shp'))
library(rgdal)
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
head(worldMap)
(maps=list.files(pattern = 'shp'))
library(rgdal)
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
head(worldMap)
setwd("~/GitHub/projectData")
