##AREA HARVESTED##
#just keep area harvested data
area_harv_1=faostat[faostat$'Element'!='Yield',]
area_harv=area_harv_1[area_harv_1$'Element'!='Production',]
head(area_harv)
#aggregate by country
area_harv=aggregate(area_harv$'Y2016',by=list(area_harv$'Area'),sum)
names(area_harv)=c('country','TotAreaHarv2016')
area_harv
#check data types
str(yield)
#centrality
summary(yield$'TotYield2016')
#dispersion
sd(yield$'TotYield2016',na.rm=T)
#coefficient of variation
sd(yield$'TotYield2016',na.rm=T)/mean(yield$'TotYield2016',na.rm=T)
#skewness
skewness(yield$'TotYield2016',na.rm=T)
#kurtosis
kurtosis(yield$'TotYield2016',na.rm=T)
Kurt(yield$'TotYield2016',na.rm=T)
##histogram
#keep non missing
data=yield[is.finite(yield$'TotYield2016'),]
#making numeric
as.numeric(data$'TotYield2016')
#histogram
hist(data$'TotYield2016')
#histogram of log
hist(log(data$'TotYield2016'))
#saving mean and sd
mnVar=mean(data$TotYield2016,na.rm=T)
sdVar=sd(data$TotYield2016,na.rm=T)
#outliers
summary(yield$'TotYield2016')
#boxplot
(bp=boxplot(yield$'TotYield2016',horizontal=T))
#boxplot of log
(bp_log=boxplot(log(yield$'TotYield2016')))
#show values of both boxplots
bp$stats
bp_log$stats
#show number of outliers
length(bp$out)
length(bp_log$out)
#merge yield, production, and area harvested data into one dataset
combinedYP=merge(yield,prod)
combinedYPAH=merge(combinedYP,area_harv)
head(combinedYPAH)
#correlation
res<-cor(combinedYPAH[,c(2:4)],use='complete.obs')
round(res,2)
#correlation of log
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
#scatterplot
scatterplotMatrix(combinedYPAH[,c(2:4)],
main="Simple Scatterplot Matrix")
#scatterplot of log
scatterplotMatrix(log(combinedYPAH[,c(2:4)]),
main="Simple Scatterplot Matrix")
#non-parametric correlation
cor(combinedYPAH[,c(2:4)],use='complete.obs',method='spearman')
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/blob/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
#select the map (shp file) needed
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
#check it out
head(worldMap)
#only keep African countries
worldMap=worldMap[worldMap$REGION==2,]
#see what variables are present
names(worldMap)
#rename "NAME" column to "country"" so can merge
names(worldMap)[names(worldMap)=='NAME'] <- 'country'
#merge the two datasets into one, by country
YPAHforMap <- merge(worldMap,combinedYPAH,
by=c("country"))
#see what happened
head(YPAHforMap)
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
#plot yield data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
#identify variable to plot
varToPlot=YPAHforMap$TotProd2016
#plot production data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Production of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Production by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
#identify variable to plot
varToPlot=YPAHforMap$TotAreaHarv2016
#plot area harvested data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Area Harvested of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Area Harvested by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/blob/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
compressedMap="https://github.com/howlem/projectData/blob/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/blob/master/TM_WORLD_BORDERS_SIMPL-0.3.zip?raw=true"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/blob/master/TM_WORLD_BORDERS_SIMPL-0.3.zip?raw=true"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
#select the map (shp file) needed
thefile=file.path('worldMap','worldMap.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
setwd("~/")
setwd("~/")
setwd("~/")
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/raw/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
#select the map (shp file) needed
thefile='TM_WORLD_BORDERS_SIMPL-0.3.shp'
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/raw/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
#select the map (shp file) needed
thefile='TM_WORLD_BORDERS_SIMPL-0.3.shp'
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
#only keep African countries
worldMap=worldMap[worldMap$REGION==2,]
#rename "NAME" column to "country"" so can merge
names(worldMap)[names(worldMap)=='NAME'] <- 'country'
#merge the two datasets into one, by country
YPAHforMap <- merge(worldMap,combinedYPAH,
by=c("country"))
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
#plot yield data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
# Chunk 1
#get data
faostat=read.csv("https://github.com/howlem/projectData/raw/master/Production_Crops_E_All_Data.csv",stringsAsFactors = F)
# Chunk 2
##YIELD##
#just keep yield data
yield_1=faostat[faostat$'Element'!='Production',]
yield=yield_1[yield_1$'Element'!='Area harvested',]
head(yield)
#aggregate by country
yield=aggregate(yield$'Y2016',by=list(yield$'Area'),sum)
names(yield)=c('country','TotYield2016')
yield
##PRODUCTION##
#just keep production data
prod_1=faostat[faostat$'Element'!='Yield',]
prod=prod_1[prod_1$'Element'!='Area harvested',]
head(prod)
#aggregate by country
prod=aggregate(prod$'Y2016',by=list(prod$'Area'),sum)
names(prod)=c('country','TotProd2016')
prod
##AREA HARVESTED##
#just keep area harvested data
area_harv_1=faostat[faostat$'Element'!='Yield',]
area_harv=area_harv_1[area_harv_1$'Element'!='Production',]
head(area_harv)
#aggregate by country
area_harv=aggregate(area_harv$'Y2016',by=list(area_harv$'Area'),sum)
names(area_harv)=c('country','TotAreaHarv2016')
area_harv
#merge yield, production, and area harvested data into one dataset
combinedYP=merge(yield,prod)
combinedYPAH=merge(combinedYP,area_harv)
head(combinedYPAH)
# Chunk 3
## SET AS WORKING HERE
# Chunk 4
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/raw/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
# Chunk 5
#select the map (shp file) needed
#thefile=file.path('worldMap','TM_WORLD_BORDERS_SIMPL-0.3.shp')
thefile='TM_WORLD_BORDERS_SIMPL-0.3.shp'
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
#only keep African countries
worldMap=worldMap[worldMap$REGION==2,]
#rename "NAME" column to "country"" so can merge
names(worldMap)[names(worldMap)=='NAME'] <- 'country'
#merge the two datasets into one, by country
YPAHforMap <- merge(worldMap,combinedYPAH,
by=c("country"))
# Chunk 6
#bring in libraries
library(ggplot2)
library(moments)
library(stringr)
library(scales)
library(car)
library(utils)
library(rgdal)
library(RColorBrewer)
library(classInt)
# Chunk 7
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
# Chunk 8: location
#plot yield data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.4
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPlot=YPAHforMap$TotYield2016
#plot yield data on map of Africa
numberOfClasses = 8
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
#plot yield data on map of Africa
numberOfClasses = 3
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(YPAHforMap, col=colorPallette, border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
names(testMap)
thefile=file.path('africayield.shp')
testMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
writeOGR(obj=YPAHforMap, dsn=".", layer="africayield", driver="ESRI Shapefile")
library(ggplot2)
library(moments)
library(stringr)
library(scales)
library(car)
library(utils)
library(rgdal)
library(RColorBrewer)
library(classInt)
writeOGR(obj=YPAHforMap, dsn=".", layer="africayield", driver="ESRI Shapefile")
thefile=file.path('africayield.shp')
testMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
@
names(testMap)
varToPlot=testMap$TtY2016
numberOfClasses = 3
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(testMap,col=colorPallette,add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
writeOGR(obj=YPAHforMap, dsn=".", layer="africayield", driver="ESRI Shapefile")
# Chunk 1
#get data
faostat=read.csv("https://github.com/howlem/projectData/raw/master/Production_Crops_E_All_Data.csv",stringsAsFactors = F)
# Chunk 2
##YIELD##
#just keep yield data
yield_1=faostat[faostat$'Element'!='Production',]
yield=yield_1[yield_1$'Element'!='Area harvested',]
head(yield)
#aggregate by country
yield=aggregate(yield$'Y2016',by=list(yield$'Area'),sum)
names(yield)=c('country','TotYield2016')
yield
##PRODUCTION##
#just keep production data
prod_1=faostat[faostat$'Element'!='Yield',]
prod=prod_1[prod_1$'Element'!='Area harvested',]
head(prod)
#aggregate by country
prod=aggregate(prod$'Y2016',by=list(prod$'Area'),sum)
names(prod)=c('country','TotProd2016')
prod
##AREA HARVESTED##
#just keep area harvested data
area_harv_1=faostat[faostat$'Element'!='Yield',]
area_harv=area_harv_1[area_harv_1$'Element'!='Production',]
head(area_harv)
#aggregate by country
area_harv=aggregate(area_harv$'Y2016',by=list(area_harv$'Area'),sum)
names(area_harv)=c('country','TotAreaHarv2016')
area_harv
#merge yield, production, and area harvested data into one dataset
combinedYP=merge(yield,prod)
combinedYPAH=merge(combinedYP,area_harv)
head(combinedYPAH)
# Chunk 3
##MAP DATA##
#get zip file from github
compressedMap="https://github.com/howlem/projectData/raw/master/TM_WORLD_BORDERS_SIMPL-0.3.zip"
#unzip the file
temp=tempfile()
download.file(compressedMap,temp)
unzip(temp)
# Chunk 4
#select the map (shp file) needed
thefile=file.path('TM_WORLD_BORDERS_SIMPL-0.3.shp')
worldMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
#only keep African countries
worldMap=worldMap[worldMap$REGION==2,]
#rename "NAME" column to "country"" so can merge
names(worldMap)[names(worldMap)=='NAME'] <- 'country'
#merge the two datasets into one, by country
YPAHforMap <- merge(worldMap,combinedYPAH,
by=c("country"))
YPAHforMap=YPAHforMap[complete.cases(YPAHforMap$TotYield2016),]
# Chunk 5
#bring in libraries
library(ggplot2)
library(moments)
library(stringr)
library(scales)
library(car)
library(utils)
library(rgdal)
library(RColorBrewer)
library(classInt)
# Chunk 6
#writeOGR(obj=YPAHforMap, dsn=".", layer="africayield", driver="ESRI Shapefile")
# Chunk 7
thefile=file.path('africayield.shp')
testMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
# Chunk 8
names(testMap)
# Chunk 9: loc
varToPlot=testMap$TtY2016
numberOfClasses = 3
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Total Yield of all crops in 2016"
shrinkLegend=0.5
title="Total 2016 Yield by Country in Africa"
plot(worldMap,col='gray',main=title)
plot(testMap,col=colorPallette,add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
# Chunk 10
#identify variable to plot
varToPlot=YPAHforMap$TotYield2016
#correlation of log
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
#install stargazer to make table
library(stargazer)
stargazer(res_log)
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
tableF=data.frame(table(res_log),row.names = NULL)
round(res_log,2)
table=data.frame(table(res_log),row.names = NULL)
stargazer(table)
res_log<-cor(log(combinedYPAH[,c("Total Yield","Total Production","Total Area Harvested")]),use='complete.obs')
#correlation of log
head(combinedYPAH)
res_log<-cor(log(combinedYPAH[,c("TotYield2016","TotProd2016","TotalAreaHarv2016")]),use='complete.obs')
cor(log(combinedYPAH[,c("TotYield2016","TotProd2016","TotalAreaHarv2016")])
res_log<-cor(log(combinedYPAH[,c("TotYield2016","TotProd2016","TotalAreaHarv2016")])
res_log<-cor(log(combinedYPAH[,c("TotYield2016","TotProd2016","TotalAreaHarv2016")]),use='complete.obs')
res_log<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(res_log,2)
correlation.matrix<-cor(log(combinedYPAH[,c(2:4)]),use='complete.obs')
round(correlation.matrix,2)
#install stargazer to make table
library(stargazer)
stargazer(correlation.matrix,title="Correlation Matrix")
stargazer(correlation.matrix,title="Correlation Matrix")
setwd("~/GitHub/projectData")
thefile=file.path('africayield.shp')
testMap <- rgdal::readOGR(thefile,stringsAsFactors=F) # use the names
plot + theme(plot.title = element_text(size = rel(1), vjust = 0),
axis.title = element_text(size = rel(1)))
